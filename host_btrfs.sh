#!/bin/bash
set -e
function LOG() { echo -e "\e[32m$@\e[0m"; }

# This script configures btrfs support, including
# automatic bootable snapshot backups.
# You must have installed Debian on a btrfs root filesystem for this already.

### CONFIGURATION ###

# the partition of the btrfs
disk="/dev/vda3"

# a snapshot of the current root will be created, this is it's name
subvol="current"

# directories that get their own subvolume.
dirs="/root /home /var/log /var/cache"

### END CONFIGURATION ###


uuid="$(blkid -o value $disk | head -n 1)"


# install utils for btrfs
sudo apt-get install -y --no-install-recommends btrfsmaintenance git make ca-certificates

# install recent kernel + btrfs-utils from backports(TODO: not recommended; Why?)
#sudo apt-get install -y --no-install-recommends linux-image-amd64/buster-backports btrfs-progs/buster-backports


systemctl enable btrfs-balance.timer btrfs-defrag.timer btrfs-scrub.timer btrfs-trim.timer


# create initial snapshot of /
LOG "Creating snapshot of /"
cd /
btrfs sub snapshot / $subvol

# set the default subvolume when mounting to the just created snapshot
btrfs sub list / | while read -r _id id _reset; do
	LOG "Setting default subvolume to id=${id}"
	btrfs sub set-default $id /
done



# prepare mount for a chroot
LOG "Preparing chroot..."
LOG "Mounting subvol=/$subvol from disk $disk to /mnt"
mount -o subvol=/$subvol $disk /mnt
for i in dev proc run sys; do
	LOG "Creating $i"
	rm -rf /mnt/$i
	mkdir /mnt/$i
	mount -o bind /$i /mnt/$i
done

LOG "Generatign fstab..."
grep -v "UUID=${uuid}" /etc/fstab > fstab.new.tmp
echo "# generated by host_btrfs.sh" >> fstab.new.tmp
echo "UUID=${uuid} / btrfs noatime,subvol=/${subvol}" >> fstab.new.tmp
for dir in $dirs; do
	echo "UUID=${uuid} ${dir} btrfs noatime,subvol=/${subvol}${dir} 0 0" >> fstab.new.tmp
done
mv fstab.new.tmp /mnt/etc/fstab

# create system service to update grub btrfs snapshot list on reboot
cat << EOF > /mnt/etc/systemd/system/grub-btrfs-reboot.service
[Unit]
Description=Update grub-btrfs.cfg before reboot/shutdown
Before=poweroff.target

[Service]
Type=oneshot
Environment="PATH=/sbin:/bin:/usr/sbin:/usr/bin"
EnvironmentFile=/etc/default/grub-btrfs/config
RemainAfterExit=true
ExecStart=/bin/true
ExecStop=bash -c 'if [ -s "\${GRUB_BTRFS_GRUB_DIRNAME:-/boot/grub}/grub-btrfs.cfg" ]; then /etc/grub.d/41_snapshots-btrfs; else \${GRUB_BTRFS_MKCONFIG:-grub-mkconfig} -o \${GRUB_BTRFS_GRUB_DIRNAME:-/boot/grub}/grub.cfg; fi'

[Install]
WantedBy=multi-user.target
EOF

# run in chroot:
LOG "Running chroot..."
cat << EOF | chroot /mnt /bin/bash
cd /

# remove old content of dirs in snapshot
for dir in ${dirs}; do
	rm -rf \$dir
done

# create sub-volume for each dir
for dir in ${dirs}; do
	btrfs sub create \$dir
done

# disable copy-on-write for /var, /tmp
chattr -R +C /var
chattr -R +C /tmp

# setup grub menu entries for btrfs snapshots
cd /root
git clone https://github.com/Antynea/grub-btrfs
cd grub-btrfs
make install

systemctl enable grub-btrfs-reboot

cd /
btrfs sub snapshot -r / fresh_install

exit 0
EOF

# copy current content to newly created volumes
for dir in $dirs; do
	LOG "Copying $dir..."
	mkdir -p $dir
	cp -arf $dir "/mnt"
done

LOG
LOG "BTRFS setup ok!"
LOG
