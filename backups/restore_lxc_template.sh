#!/bin/bash
set -eu

LXC_HOOK_DIR="/usr/share/lxc/hooks"
LXC_TEMPLATE_CONFIG="/usr/share/lxc/config"

LXC_NAME=
LXC_PATH=
LXC_ROOTFS=
LXC_ARCHIVE=

function usage() {
	cat <<EOF
LXC Backup restore template script

Template specific arguments:
  -h | --help: Print this help message and exit.
  -a | --archive: Path to the backup archive

LXC internal arguments (do not pass manually!):
  --name <name>: The container name
  --path <path>: The path to the container
  --rootfs <rootfs>: The path to the containers rootfs
  --mapped-uid <map>: A uid map (user namespaces)
  --mapped-gid <map>: A gid map (user namespaces)
EOF
}

function cleanup() {
	echo "Cleanup"

	# perform cleanup by removing the temporary rootfs.tar
	rm -vf "${LXC_PATH}/rootfs.tar"
}

trap cleanup EXIT HUP INT TERM

if ! options=$(getopt -o ha: -l help,archive:,name:,path:,rootfs:,mapped-uid:,mapped-gid: -- "$@"); then
	usage
	exit 1
fi
eval set -- "$options"

while true; do
	case "$1" in
		-h|--help)		usage && exit 1;;
		--name)			LXC_NAME="$2"; shift 2;;
		--path)			LXC_PATH="$2"; shift 2;;
		--rootfs)		LXC_ROOTFS="$2"; shift 2;;
		-a|--archive)	LXC_ARCHIVE="$2"; shift 2;;
		--mapped-uid)	LXC_MAPPED_UID="$2"; shift 2;;
		--mapped-gid)	LXC_MAPPED_GID="$2"; shift 2;;
		*)				break;;
  esac
done

echo "Restoring backup \"${LXC_ARCHIVE}\" to container \"${LXC_NAME}\""

pushd "${LXC_PATH}"
mv config config_orig
ROOTFS_PATH="$(grep "lxc.rootfs.path" config_orig)"
popd

# first, extract the LXC_PATH backup, containing the config file and rootfs.tar
tar --numeric-owner -xvpf "${LXC_ARCHIVE}" -C "${LXC_PATH}"

# append new rootfs path to config
pushd "${LXC_PATH}"
echo -e "\n\n# This container was restored from backup, above is the original config" >> config
echo "# This is the rootfs entry generated by the lxc-create:" >> config
echo "${ROOTFS_PATH}" >> config
echo "lxc.uts.name = ${LXC_NAME}"
popd

# then extract the rootfs to the target rootfs(possibly mounted)
tar --numeric-owner -xvpf "${LXC_PATH}/rootfs.tar" -C "${LXC_ROOTFS}"
